@startuml Diagrama 2
title Diagrama Sistema Boleter√≠a

class Usuario{
    -nombre: String
    -correo: String
    -telefono: String
    +Usuario(String, String, String)
    +getNombre(): String
    +toString(): String
}

class Concierto{
    -nombre: String
    -fecha: LocalDate
    -hora: LocalTime
    -lugar: Lugar
    -artistas: List<String>
    -Boletos: List<Boleto>
    +Concierto(String, LocalDate, LocalTime, Lugar, List<String>)
    +getNombre(): String
    +getFecha(): LocalDate
    +getArtistas(): List<String>
    +getLugar(): Lugar
    +getBoletosDisponibles(): List<Boleto>
    +toString(): String
}

enum EstadoBoleto{
    Disponible,
    Vendido
}

class Boleto{
    -id: int
    -precio: double
    -estado: EstadoBoleto
    -asiento: Asiento
    -concierto: Concierto
    +Boleto(int, double, EstadoBoleto, Asiento, Concierto)
    +getId(): int
    +getPrecio(): double
    +getEstado(): EstadoBoleto
    +getAsiento(): Asiento
    +getConcierto(): Concierto
    +setEstado(EstadoBoleto): void
    +toString(): String
}

class Lugar{
    -nombre: String
    -direccion: String
    -capacidad: int
    +Lugar(String, String, int)
    +getNombre(): String
    +getDireccion(): String
    +getCapacidad(): int
    +toString(): String
}

enum TipoAsiento {
    VIP,
    General
}

class Asiento{
    -numero: int
    -fila: String
    -tipo: TipoAsiento
    +Asiento(int, String, TipoAsiento)
    +getNumero(): int
    +getFila(): String
    +getTipo(): String
    +toString(): String
}


class Compra{
    -usuario: Usuario
    -boletosComprados: List<Boleto>
    -fecha: LocalDate
    -total: double
    +Compra(Usuario, List<Boleto>)
    +agregarBoleto(): void
    +getUsuario(): String
    +getTotal(): double
    +getFecha(): LocalDate
    +getBoletosComprados(): List<Boletos>
    +toString(): String
}

class SistemaVentas{
    -listaConcierto: List<Concierto>
    -listaCompras: List<Compra>
    +main(): void static
    +buscarConciertos(nombre: String, fecha: LocalDate, artista: String): Concierto
    +seleccionarAsiento(Concierto, numeroAsiento: int): void
    +comprarBoleto(usr: Usuario, boletos: List<Boleto>): void
    +confirmacionCompra(compra: Compra): void
}   

Boleto .> EstadoBoleto: usa
Asiento .> TipoAsiento: usa


SistemaVentas ..> Compra: usa
SistemaVentas ..> Concierto: consulta

Usuario "1..*" <--o "1..*" Compra: registra
Compra "1" *--> "1..*" Boleto: tiene
Boleto "1..*" <--* "1" Concierto: vende
Concierto "1..*" o--> "1..*" Lugar: necesita
Boleto "1" <-- "1" Asiento: tiene
@enduml